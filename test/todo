# now

# profile alclusterer

# inconsistent pre-istart fits aren't always inconsistent (e.g. 3-33 in /fh/fast/matsen_e/dralph/partis/allele-finder/v3/gls-gen/simu/gls-gen-simu/n-events-300000/0/logs/partis/log)
# probably need to do something with the fact that allele clustering can actually pick up nearby alleles pretty well (?)
#  - maybe add close (few-snp) new alleles if they're super clear cut, i.e. very low j mutation, and other things (?)
# what to do about internal dashes in alcluster consensus seqs?

# also remove Vs that don't extend through cysteine
#  - remove 'D' thing from wherever they're getting removed somewhere else

# fix/update fraction uncertainty for obs == total

# read through/clean up vsearch run fcn
#   - add some default dbg info
# set some mean mute freq information in waterer.info just based on averages from the dicts in <self.info>, instead of pcounter

# optimizations/cleanup (more below)
#  - add a local tmp dir to recombinator
#  - streamline (and minimize -- e.g. remove any of the ones in waterer that you can) add_implicit_info() calls
#    - hamming_distance() is especialy slow
#    - when what you're really doing is checking internal <line> consistency -- maybe just check consistency instead of recaluclating everything
#    - don't recalculate the keys that require that call if they're already in the <line>)
#  - switch all color_mutants() calls to new different-length-handler/aligner
#  - fix /fh/fast/matsen_e/kdavidse/partis_prob/SRR1383455_collapse-unique_atleast-2_partitioning.log
#  - instead of rerunning sw when you add or remove an allele, write something in waterer to switch the v_gene for a <line>
#  - add sstat memory checks to utils.finish_process() (or maybe while you're waiting for them to finish?)
#  - add ape, geiger, and laser to dockerfile r install line
#  - automate n-procs
#    - improve n_precache_proc calculator (expecially for large samples)
#    - auto-set clustering step procs (at least when seed partitioning, since you don't know before you remove other cdr3 lengths how many you'll have)
#    - need to redo n procs in compareutils now that everything's so much faster
#    - get auto-n-procs working in run.py (or partis?) [NOTE look at bottom of compareutils.py for ideas]
#  - improve default n-partitions-to-write (I think just switch back to preserving previous partitions from different n_procs)
#  - check whether translation needs to have a lower fractional bound, i.e. don't let the translation be too much smaller than the actual cluster (c.f. kate-qrs data -- what's happening translation-wise when really big clusters are getting merged)
#  - stop passing ambiguous char to ham both in the yaml and on the command line
#  - could speed up sw a lot by first using vsearch info to use only a few v genes for each sequence

# testing
#  - add allele finding

# paper
#  - add scheepers data (well, and others)
#  - add new chaim data (igg + igm)
#  - plots
#    - add nsnps up to at least 6
#    - add multi-nsnps with more simultaneous alleles and more shared snps
#  - could potentially need to rerun tests for vsearch alignment, deprecation of --dont-remove-unlikely-alleles (and other changes?)

# shouldn't the indel-adders be modifying event.codon_positions?

# check allele names coming in from tigger (make sure we know about all the alleles)
# cf the two different imgt gl sets
# handle naming ambiguity (i.e. which gene do we count the snps from
# do cases where two or more v genes are equidistant from the query need to be handled more carefully?

# alleleclusterer
#  - need to deal with different length alleles, i.e. if there's extra crap on the left or right of the new/old allele
#   - maybe don't not consider large clonal families? (not sure. after all the whole alleleremover strategy breaks with very large families)

# fix allele name decider to more strongly prefer non-snpd genes (well, make sure it hasn't messed anything up yet)
# new-allele name arbitration needs to happen when plotting (e.g. count as correct alleles that only differ after the cpos)
# light chain allele finding: need to account for larger amount of v to right of cysteine?

# overall gl inference workflow
# - apply vsearch/swarm to v_qr_seqs to see if there's any well-separated new genes that we should add to the initial set
#   - decide which of these clusters represent new alleles
#     - add a requirement that the inferred germlines for each query in the cluster aren't crazy far apart (?)
#   - add consensus sequence from these clusters
# - run allele removal, keeping only the most-likely within each class
#   - lower bound should be smaller (at least for large samples) UPDATE I think I already lowered this? but I'm not sure
# - in allele finding, start checking whether to remove template gene (based on mfreq distribution)
# - at some point need to have good criteria for removing alcluster alleles that don't have plausible clonal family + mute freq properties
# - could maybe use mutation rate in j as proxy for "real" v mutation rate (maybe just don't consider seqs with more than, say 5 j mutations)

# default gl set
#  - deal with 'D' (imgt 'duplicate') alleles (not sure if remove, or swap for the non-D, or actually maybe just leave them and fix the name splitter)
#  - remove v genes with bad cysteines (?)

#  - allow indels in both V and J at the same time (?)

# ----------------------------------------------------------------------------------------
# fix ham scons test
# fix waterer debug fails-to-rerun so they all print uid (or just one of them? in any case clean it up)
# is best-minus-x stuff still working? (I'm almost certain not -- I'm only calculating the partition log prob the last time through, so all the other times I can't rewind at all. I need to check that this isn't leading to too much over-mergin)
# add only-big-clusters option (well, probably make it the default, and allow to deactivate with --accurate-singletons)
# add kbounds to validation plots (i.e. flag queries for which kbounds didn't include true kset)
# fix fuckup where vsearch partition gets its ccfs
# improve hfrac bounds for vsearch (especially) and regular (maybe use only cdr3 hfrac?)

# definitively fix ig-sw length issue

# data:
#  - katie
#  - cluster these: /fh/fast/matsen_e/processed-data/cft/2016-10-21-rubelt-heritable-influence (/fh/fast/matsen_e/data/rubelt-heritable-influence-2016-10-21/proc_data/B-cell_memory.fasta /fh/fast/matsen_e/data/rubelt-heritable-influence-2016-10-21/proc_data/B-cell_naive.fasta)
#  - kate

# code cleanup
#  - split up utils.py
#  - remove unused stuff from Result (and RecoEvent?)
#  - stop using 'queries', 'duplicates', and 'indels' in sw info (?)

# partition/annotation validation
#  - go through a careful round of partition validation on larger samples (including light chain)
#  - double-check purity/completeness usage (should maybe take account of the fact that we remove duplicate sequences (and simulation should probably just forbid/remove duplicates) UPDATE oh wait but we're not removing duplicates in simulation)
#  - decide what you really want to do for ccf stuff and check_partition()
#  - rerun on all(ish) data sets

# simulation
#  - figure out whether GTR with current parameter setup actually makes sense to use
#  - --simulate-partially-from-scratch throws the out-of-frame exception if you don't use the allele finding testing --initial-germline-dir

# turn per-base mutation rates on
# move dummy d adding in waterer to summarize_query()
# get multi-hmm parameter counting working
# need to do allele removal for d and j

# testing:
#  - needs at least a little light chain action
#  - make sure there's some multiple indels in the testing file
#  - add to metrics:
#    - mutation-freq accuracy
#    - cdr3 hamming or n_mutes
#    - multi-hmm (mebbe annotation accuracy on final clusters?)
#  - add shm indels, maybe directly checking that they're right
#  - re-add numberical precision stuff to test.py diff (diff-paramters.py, was it?)

# allele finding/germline set generation:
#  - for new alleles that are clearly homozygous (i.e. fit is flat and near 1.) we should maybe remove the old allele
#  - I don't think there's a reason in principle, at least for 1 snp, why we can't allow more than one new allele for that isnp
#  - maybe increase self.fraction_of_seqs_to_exclude?
#  - all alleles (including new ones) should have roughly the same mut freq distribution (especially at low mutation)'
#  - try trevor's k-means-style-ish clustering idea
#  - make sure allele finding can't add the same sequence coming from different alleles (update: maybe this is already done?)
#  - do all the plots separately for each potential original snp base (i.e. separate plot for A, C, G, T)?'
#  - add requirement for mulitple j genes for new alleles (?)'
#  - increase n_max_mutations_per_segment for highly-mutated repertoires (?)'

# optimization
#  - could speed up mutefreqer increment if there was only one call to utils get mute freq stuff
#  - could maybe switch to only checking the most likely j frame (maybe by moving backwards through j hmm?)
#  - go through glomerator (and maybe dphandler) and make sure everything that should be a reference or a pointer is one
#  - switch all the c++ map.count() calls to map.find()
#  - figure out a way to call naive_hfracs_.clear() without killing cpu usage
#  - switch only_genes in c++ to a set
#  - may be worthwhile to switch from colon-string hash map scheme to something shorter
#  - kbounds logical or should check if/handle case where one of them is unset (ok not really an optimization, but it's not very important atm)
#  - i think i could switch to running all the ksets of each gene at once (which would drastically reduce the dphandler trellis cache size, since we'd only need to keep one gene at a time), but this would involve a lot of careful rewriting in dphandler
#  - try to incorporate cdr3 length class stuff into loop optimizations in bcrham
#  - can v_match loop in get_padding_parameters() go outside the query loop?
#  - might make more sense to have the real insertions on the right side of v and d (instead of left side of d and j), since then we could easily skip k sets that didn't match the most likely frame (note that this would involve being really careful about all the places in the c++ and python where it assumes they're where they are now)
#  - it might make more sense to ditch the whole k_v k_d parameterization, since since it inherently suggests a rectangular region of k-space, which doesn't take account of the fact that we know beforehand that we shouldn't really be checking everything in that rectangular region
#    - maybe a stopgap would be to increment/decrement k_v/k_d in tandem?
#    - would make more sense to have per-gene kbounds
#  - for partitioning, maybe use time as a proxy rather than number of calculations, perhaps using inter-step vs in-step time (note that at least on my setup the cp commands take a significant amount of time)

# bryan's super-short-read sample
#  - figure out cause of mutation rate discontinuity in some clusters (better insertion mutation rate?)
#    - make a simulation sample with low, even mutation throughout v, d, and j, and see what you infer
#  - print cdr3 mutation rate (and maybe also make plots without dividing by length?)
#  - are mutation rates in J to left of tryp too high? (they're much higher than in the rest of J)
#  - try with no-indels?

# over-long multi-hmm d (and kinda j) 5' insertion:
# /home/dralph/work/partis-dev/packages/ham/bcrham --algorithm viterbi --debug 2 --hmmdir _tmp/tmp-hmms --datadir /tmp/dralph/hmms/391731/germline-sets --infile /tmp/dralph/hmms/391731/hmm_input.csv --outfile /tmp/dralph/hmms/391731/hmm_output.csv --chain h --random-seed 1478107057 --ambig-base N

# print_reco_event:
#  - when printing cluster annotations on simulation, simulation should actually use the true partition, not split according(ish) to the inferred partition

# d gene finding
  # corey data
  # andrew data/ideas
 