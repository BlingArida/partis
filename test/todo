#  merge to master to pick up hamming length bug fix

# paper
#  - alphabetize all method names in plot legends
#  - rerun data stuffs
#  - add some non-human data to supplement
#  - manual
#    - update/expand simulation section (post to b-t.cr)
#    - add/update allele finding and allele clustering
#  - fix igdiscover name synchronization bug (_+S[xxx]+yyyyy thing)
#  - archived supplemental info
#    - maybe use zenodo?
#    - simulated samples
#    - gl fastas from simulation, and all methods
#  - add section on how trees are made
#  - time point words in caption are wrong for 2/3 figures
#  - novel --> non-IMGT (?)
#  - say something specifically about light chain (\cite{Watson2014-op})
#  - text
#    - make it more clear that igdiscover is only for igm
#  - plots
#    - combine slice plots into one/a few figure[s]
#    - move spurious slice plots to supplement

# improve forbidden character treatment in seqfileopener

# need to do allele removal for d and j

# run on tissue atlas data

# partitioning
#  - double check shared clustering merging in partitiondriver (?)
#  - add option to automatically divide into overlapping random subsets, and then merge shared clusters
#  - switch to joyplot for partition plots (https://github.com/halhen/viz-pub/blob/master/sports-time-of-day/2_gen_chart.R)
#  - maybe use mds/k-means instead of vsearch for fast clustering
#  - is best-minus-x stuff still working? (I'm almost certain not -- I'm only calculating the partition log prob the last time through, so all the other times I can't rewind at all. I need to check that this isn't leading to too much over-merging)

# general/less urgent
#  - seqfileopener/--n-random-queries seems to get rerun if cache-parameters is called automatically (e.g. by annotate)
#  - add fail/success column to annotation files
#  - add failed queries to partition output file
#  - fix cdr3/junction problem
#  - doesn't cdr3 length need to be reset if there's an shm indel within cdr3?
#  - is functional info correct after fwk insertion trimming and N padding?
#  - switch everybody over to new utils.align_seqs() fcn
#  - require output files have .csv suffix (or something similar)
#  - write a good error message for when vsearch can't find any v matches (maybe run sw?)
#  - figure out how to get vsearch to be more permissive with shitty matches to reduce the number of failed queries
#  - split isnp stuff out of color_mutants and combine with hamming_distance
#  - shouldn't the indel-adders be modifying event.codon_positions?
#  - allow indels in both V and J at the same time (?)
# turn per-base mutation rates on (?)

# testing:
#  - needs at least a little light chain action
#  - make sure there's some multiple indels in the testing file
#  - add to metrics:
#    - mutation-freq accuracy
#    - cdr3 hamming or n_mutes
#    - multi-hmm (mebbe annotation accuracy on final clusters?)
#  - add shm indels, maybe directly checking that they're right
#  - re-add numerical precision stuff to test.py diff (diff-paramters.py, was it?)

# optimizations/cleanup (more below)
#  - add a local tmp dir to recombinator
#  - streamline (and minimize -- e.g. remove any of the ones in waterer that you can) add_implicit_info() calls
#    - hamming_distance() is especialy slow
#    - when what you're really doing is checking internal <line> consistency -- maybe just check consistency instead of recaluclating everything
#    - don't recalculate the keys that require that call if they're already in the <line>)
#  - switch all color_mutants() calls to new different-length-handler/aligner
#  - fix /fh/fast/matsen_e/kdavidse/partis_prob/SRR1383455_collapse-unique_atleast-2_partitioning.log
#  - instead of rerunning sw when you add or remove an allele, write something in waterer to switch the v_gene for a <line>
#  - add sstat memory checks to utils.finish_process() (or maybe while you're waiting for them to finish?)
#  - add ape, geiger, and laser to dockerfile r install line
#  - automate n-procs
#    - improve n_precache_proc calculator (expecially for large samples)
#    - auto-set clustering step procs (at least when seed partitioning, since you don't know before you remove other cdr3 lengths how many you'll have)
#    - need to redo n procs in compareutils now that everything's so much faster
#    - get auto-n-procs working in run.py (or partis?) [NOTE look at bottom of compareutils.py for ideas]
#  - improve default n-partitions-to-write (I think just switch back to preserving previous partitions from different n_procs)
#  - check whether translation needs to have a lower fractional bound, i.e. don't let the translation be too much smaller than the actual cluster (c.f. kate-qrs data -- what's happening translation-wise when really big clusters are getting merged)
#  - stop passing ambiguous char to ham both in the yaml and on the command line
#  - could speed up sw a lot by first using vsearch info to use only a few v genes for each sequence

# code cleanup
#  - clean up how vsearch partition gets its ccfs (?)
#  - split up utils.py
#  - remove unused stuff from Result (and RecoEvent?)
#  - stop using 'queries', 'duplicates', and 'indels' in sw info (?)
#  - move dummy d adding in waterer to summarize_query()
#  - definitively fix ig-sw length issue
#  - when printing cluster annotations on simulation, simulation should actually use the true partition, not split according(ish) to the inferred partition

# germline inference
# - allele fitting
#   - do all the plots separately for each potential original snp base (i.e. separate plot for A, C, G, T)?'
# - alcluster
#   - switch to k-means + mds
#   - add plots of v/j mfreqs for each cluster (?)
#   - need some way to remove template genes when alclustering (or maybe just a way to remove un-assigned genes afterward) [wait i think i did this]
#   - make sure J length is reasonable before using n mutations (i.e., use freq instead of n)
#   - maybe forbid alclusterer to add few-snp alleles
#   - synchronize "gene we just added" and "existing gene" distance/n_snp requirements

# optimization
#  - could speed up mutefreqer increment if there was only one call to utils get mute freq stuff
#  - could maybe switch to only checking the most likely j frame (maybe by moving backwards through j hmm?)
#  - go through glomerator (and maybe dphandler) and make sure everything that should be a reference or a pointer is one
#  - switch all the c++ map.count() calls to map.find()
#  - figure out a way to call naive_hfracs_.clear() without killing cpu usage
#  - switch only_genes in c++ to a set
#  - may be worthwhile to switch from colon-string hash map scheme to something shorter
#  - kbounds logical or should check if/handle case where one of them is unset (ok not really an optimization, but it's not very important atm)
#  - i think i could switch to running all the ksets of each gene at once (which would drastically reduce the dphandler trellis cache size, since we'd only need to keep one gene at a time), but this would involve a lot of careful rewriting in dphandler
#  - try to incorporate cdr3 length class stuff into loop optimizations in bcrham
#  - can v_match loop in get_padding_parameters() go outside the query loop?
#  - might make more sense to have the real insertions on the right side of v and d (instead of left side of d and j), since then we could easily skip k sets that didn't match the most likely frame (note that this would involve being really careful about all the places in the c++ and python where it assumes they're where they are now)
#  - it might make more sense to ditch the whole k_v k_d parameterization, since since it inherently suggests a rectangular region of k-space, which doesn't take account of the fact that we know beforehand that we shouldn't really be checking everything in that rectangular region
#    - maybe a stopgap would be to increment/decrement k_v/k_d in tandem?
#    - would make more sense to have per-gene kbounds
#  - for partitioning, maybe use time as a proxy rather than number of calculations, perhaps using inter-step vs in-step time (note that at least on my setup the cp commands take a significant amount of time)
