# now
#  - #218
#  - automate n-procs, at least for viterbi/parameter caching
#    - improve n_precache_proc calculator (expecially for large samples)
#    - auto-set clustering step procs (at least when seed partitioning, since you don't know before you remove other cdr3 lengths how many you'll have)
#  - check/verify how having the wrong germline allele affects naive seq accuracy
#  - why so many left side exclusions in laura data
#    - more generally, wtf is really going on with both left and right exclusions -- are they all how I want them to be?
#  - clean up the clusterfuck internal_name_column bullshit in seqfileopener
#  - move metadata and seqs of interest and anything else you can to datascripts

# check whether translation needs to have a lower fractional bound, i.e. don't let the translation be too much smaller than the actual cluster (c.f. kate-qrs data -- what's happening translation-wise when really big clusters are getting merged)
# add between vs within cluster hamming distance plots
# stop passing ambiguous char to ham both in the yaml and on the command line
#  - within vs between plots for each cdr3 length

# print_reco_event:
#  - maybe simulation line shouldn't be associated with a particular inferred line (see below)
#  - fix multiple-indel printing'
#  - just print the length for large fv/jf insertions
#  - when printing cluster annotations on simulation, simulation should actually use the true partition, not split according(ish) to the inferred partition

# fix ham scons test
# fix waterer debug fails-to-rerun so they all print uid (or just one of them? in any case clean it up)
# is best-minus-x stuff still working? (I'm almost certain not -- I'm only calculating the partition log prob the last time through, so all the other times I can't rewind at all. I need to check that this isn't leading to too much over-mergin)
# add only-big-clusters option (well, probably make it the default, and allow to deactivate with --accurate-singletons)
# add kbounds to validation plots (i.e. flag queries for which kbounds didn't include true kset)
# fix fuckup where vsearch partition gets its ccfs
# improve hfrac bounds for vsearch (especially) and regular (maybe use only cdr3 hfrac?)

# data:
#  - katie
#  - cluster these: /fh/fast/matsen_e/processed-data/cft/2016-10-21-rubelt-heritable-influence (/fh/fast/matsen_e/data/rubelt-heritable-influence-2016-10-21/proc_data/B-cell_memory.fasta /fh/fast/matsen_e/data/rubelt-heritable-influence-2016-10-21/proc_data/B-cell_naive.fasta)
#  - kate

# code cleanup
#  - split up utils.py
#  - remove unused stuff from Result (and RecoEvent?)
#  - stop using 'queries', 'duplicates', and 'indels' in sw info

# partition/annotation validation
#  - go through a careful round of partition validation on larger samples (including light chain)
#  - double-check purity/completeness usage (should maybe take account of the fact that we remove duplicate sequences (and simulation should probably just forbid/remove duplicates) UPDATE oh wait but we're not removing duplicates in simulation)
#  - decide what you really want to do for ccf stuff and check_partition()
#  - rerun on all(ish) data sets

# simulation
#  - figure out whether GTR with current parameter setup actually makes sense to use
#  - --simulate-partially-from-scratch throws the out-of-frame exception if you don't use the allele finding testing --initial-germline-dir

# turn per-base mutation rates on
# allow indels in both V and J at the same time (?)
# move dummy d adding in waterer to summarize_query()
# get multi-hmm parameter counting working
# need to do allele removal for d and j

# testing:
#  - needs at least a little light chain action
#  - make sure there's some multiple indels in the testing file
#  - add to metrics:
#    - mutation-freq accuracy
#    - cdr3 hamming or n_mutes
#    - multi-hmm (mebbe annotation accuracy on final clusters?)

# allele finding/germline set generation:
#  - for new alleles that are clearly homozygous (i.e. fit is flat and near 1.) we should maybe remove the old allele
#  - I don't think there's a reason in principle, at least for 1 snp, why we can't allow more than one new allele for that isnp
#  - maybe increase self.fraction_of_seqs_to_exclude?
#  - all alleles (including new ones) should have roughly the same mut freq distribution (especially at low mutation)'
#  - try trevor's k-means-style-ish clustering idea
#  - make sure allele finding can't add the same sequence coming from different alleles (update: maybe this is already done?)
#  - do all the plots separately for each potential original snp base (i.e. separate plot for A, C, G, T)?'
#  - add requirement for mulitple j genes for new alleles (?)'
#  - increase n_max_mutations_per_segment for highly-mutated repertoires (?)'

# optimization
#  - could speed up mutefreqer increment if there was only one call to utils get mute freq stuff
#  - could maybe switch to only checking the most likely j frame (maybe by moving backwards through j hmm?)
#  - go through glomerator (and maybe dphandler) and make sure everything that should be a reference or a pointer is one
#  - switch all the c++ map.count() calls to map.find()
#  - figure out a way to call naive_hfracs_.clear() without killing cpu usage
#  - switch only_genes in c++ to a set
#  - may be worthwhile to switch from colon-string hash map scheme to something shorter
#  - kbounds logical or should check if/handle case where one of them is unset (ok not really an optimization, but it's not very important atm)
#  - i think i could switch to running all the ksets of each gene at once (which would drastically reduce the dphandler trellis cache size, since we'd only need to keep one gene at a time), but this would involve a lot of careful rewriting in dphandler
#  - try to incorporate cdr3 length class stuff into loop optimizations in bcrham
#  - can v_match loop in get_padding_parameters() go outside the query loop?
#  - might make more sense to have the real insertions on the right side of v and d (instead of left side of d and j), since then we could easily skip k sets that didn't match the most likely frame (note that this would involve being really careful about all the places in the c++ and python where it assumes they're where they are now)
#  - it might make more sense to ditch the whole k_v k_d parameterization, since since it inherently suggests a rectangular region of k-space, which doesn't take account of the fact that we know beforehand that we shouldn't really be checking everything in that rectangular region
#    - maybe a stopgap would be to increment/decrement k_v/k_d in tandem?
#    - would make more sense to have per-gene kbounds

# bryan's super-short-read sample
#  - figure out cause of mutation rate discontinuity in some clusters (better insertion mutation rate?)
#    - make a simulation sample with low, even mutation throughout v, d, and j, and see what you infer
#  - print cdr3 mutation rate (and maybe also make plots without dividing by length?)
#  - are mutation rates in J to left of tryp too high? (they're much higher than in the rest of J)
#  - try with no-indels?

# over-long multi-hmm d (and kinda j) 5' insertion:
# /home/dralph/work/partis-dev/packages/ham/bcrham --algorithm viterbi --debug 2 --hmmdir _tmp/tmp-hmms --datadir /tmp/dralph/hmms/391731/germline-sets --infile /tmp/dralph/hmms/391731/hmm_input.csv --outfile /tmp/dralph/hmms/391731/hmm_output.csv --chain h --random-seed 1478107057 --ambig-base N
